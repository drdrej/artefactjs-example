{
  "name": "mana",
  "version": "0.1.21",
  "description": "mana potion",
  "main": "index.js",
  "scripts": {
    "test": "mocha $(find test -name '*.test.js')"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/3rd-Eden/mana"
  },
  "keywords": [
    "api",
    "api-client",
    "api-structure",
    "base",
    "client",
    "cows",
    "mana",
    "rest"
  ],
  "author": {
    "name": "Arnout Kazemier"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/3rd-Eden/mana/issues"
  },
  "homepage": "https://github.com/3rd-Eden/mana",
  "dependencies": {
    "assign": "0.1.x",
    "back": "0.1.x",
    "debug": "0.7.x",
    "fusing": "0.2.x",
    "ms": "0.6.x",
    "request": "2.34.x",
    "eventemitter3": "0.1.x"
  },
  "devDependencies": {
    "mocha": "1.12.x",
    "pre-commit": "0.0.x",
    "chai": "1.9.x"
  },
  "readme": "# mana\n\nMana is an small package that provides basic and a dead simple API structure for\ncreating high performance API clients. Take your mana potion and start creating\nmagical API clients which contain the following powers:\n\n- **Rolling tokens** Supports multiple OAuth tokens which will be switched when\n  rate limits are hit.\n- **Callback queue** Multiple requests calls to the same URL will result in a\n  single call.\n- **Mirrors** When API endpoints become unresponsive, alternate replica's or\n  mirrors API's can be hit instead.\n- **Back off** Build in exponential back off when the API endpoint returns an\n  error or error code.\n- **Conditional requests** Requests with Etags can be cached and result will be\n  reused when a 304 is returned. (Supports async and sync cache engines.)\n\n## Installation\n\nThe module is released through npm.\n\n```\nnpm install --save mana\n```\n\n## Drinking the potion\n\nThe module assumes a simple pattern. The API end points are listed in a folder\ncalled `endpoints`. This folder contains JavaScript files which exports\na function:\n\n```js\nfunction Endpoint(api) {\n  this.api = api;\n}\n\nmodule.exports = Endpoint\n```\n\nThis function receives a reference to your base API class once it's initialised.\nThese API endpoints will be introduced on the prototype of your base API in\nlowercase. So if you name your file `Endpoints` it will create an\n`base.endpoints` method for you which access this constructed function. Now the\nbeauty of this is that these methods support lazy construction. So only when you\naccess the `.endpoints` property, it will create a new instance (only once\nof course). This way you don't construct pointless API points that might never be\nused by your users. \n\nIn addition to lowercasing your endpoint and introducing it as constructed\nproperty it also exposes the Full class on the base API. This class is Uppercase\nfirst, just like all Classes should be in JavaScript.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "mana@0.1.21",
  "dist": {
    "shasum": "a60a9c439b785b61a361f0a9b05b29ae5a64e956"
  },
  "_from": "mana@0.1.x",
  "_resolved": "https://registry.npmjs.org/mana/-/mana-0.1.21.tgz"
}
